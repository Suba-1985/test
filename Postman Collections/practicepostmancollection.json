{
	"info": {
		"_postman_id": "34262f48-4fd4-4d20-b12a-2714ee89b499",
		"name": "PracticingPostman",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "GetAllPrograms",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0e6bf852-dc1e-4a5b-8339-14e8c7318f5b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "2e017c31-6cd2-4c9c-9c28-9d1cd7569178",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}{{GetAllPrograms}}"
			},
			"response": []
		},
		{
			"name": "CreateProgram1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "268151b3-e1ba-49c6-9c25-f70647ff16bd",
						"exec": [
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"let jsonResponseData = pm.response.json();\r",
							"pm.environment.set(\"progID\", jsonResponseData.programId);\r",
							"pm.environment.set(\"programName\", jsonResponseData.programName);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Test data Type of a response\", () => {\r",
							"    pm.expect(jsonResponseData).to.be.an(\"Object\");\r",
							"    pm.expect(jsonResponseData.programId).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponseData.programName).to.be.a(\"string\");\r",
							"    pm.expect(jsonResponseData.programName).to.not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Schema validation for response body\", function () {\r",
							"    var schema = {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"            programId: { type: \"number\" },\r",
							"            programName: { type: \"string\" },\r",
							"            programDescription: { type: \"string\" },\r",
							"            programStatus: { type: \"string\" },\r",
							"            creationTime: { type: \"string\" },\r",
							"            lastModTime: { type: \"string\" }\r",
							"        },\r",
							"        required: [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
							"    };\r",
							"\r",
							"    pm.expect(tv4.validate(jsonResponseData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('schema validation', () => {\r",
							"    var schema = {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"            programId: { type: \"number\" },\r",
							"            programName: { type: \"string\" },\r",
							"            programDescription: { type: \"string\" },\r",
							"            programStatus: { type: \"string\" },\r",
							"            creationTime: { type: \"string\" },\r",
							"            lastModTime: { type: \"string\" }\r",
							"        },\r",
							"        required: [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
							"    };\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"pm.test(\"programId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programId).to.be.a('number');\r",
							"    pm.expect(responseData.programId).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"programName is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.programName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"programDescription is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programDescription).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transfer-Encoding header is present in the response\", function () {\r",
							"    pm.expect(pm.response.headers.has(\"Transfer-Encoding\")).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transfer-Encoding header is set to chunked\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.equal(\"chunked\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transfer-Encoding header is not set to gzip\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.not.equal(\"gzip\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transfer-Encoding header is not set to deflate\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.not.equal(\"deflate\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transfer-Encoding header is not set to compress\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.not.equal(\"compress\");\r",
							"});\r",
							"\r",
							"// Store the programId from the response in an environment or global variable\r",
							"var programId = responseBody.programId;\r",
							"pm.environment.set(\"programId\", programId);\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.programId).to.exist;\r",
							"    pm.expect(responseData.programName).to.exist;\r",
							"    pm.expect(responseData.programDescription).to.exist;\r",
							"    pm.expect(responseData.programStatus).to.exist;\r",
							"    pm.expect(responseData.creationTime).to.exist;\r",
							"    pm.expect(responseData.lastModTime).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"programId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programId).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"programName is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"programDescription is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programDescription).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"programId is a positive integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programId).to.be.a('number').and.to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"programName is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"programDescription is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programDescription).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"programStatus is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programStatus).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"creationTime is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.creationTime).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"lastModTime is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.lastModTime).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"programId should be a positive integer\", function () {\r",
							"    pm.expect(jsonResponseData.programId).to.be.a(\"number\").and.to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"programName should not be an empty string\", function () {\r",
							"    pm.expect(jsonResponseData.programName).to.be.a(\"string\").and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"programDescription should not be an empty string\", function () {\r",
							"    pm.expect(jsonResponseData.programDescription).to.be.a(\"string\").and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"programStatus should not be an empty string\", function () {\r",
							"    pm.expect(jsonResponseData.programStatus).to.be.a(\"string\").and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"creationTime should not be an empty string\", function () {\r",
							"    pm.expect(jsonResponseData.creationTime).to.be.a(\"string\").and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"lastModTime should not be an empty string\", function () {\r",
							"    pm.expect(jsonResponseData.lastModTime).to.be.a(\"string\").and.to.have.lengthOf.at.least(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "03717993-f065-4bdb-8d10-6fe9623f9f19",
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "80c35f38-577e-4990-922a-31dc98925978",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"programDescription\": \"{{prgDesc}}\",\r\n    \"programName\": \"{{prgName}}+{{$randomAlphaNumeric}}\",\r\n    \"programStatus\": \"{{prgStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PostProgramEndPoint}}"
			},
			"response": []
		},
		{
			"name": "CreateProgram1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "268151b3-e1ba-49c6-9c25-f70647ff16bd",
						"exec": [
							"\r",
							"var pnames=pm.environment.get(\"pnames\");\r",
							"if(pnames && pnames.length >0)\r",
							"{\r",
							"postman.setNextRequest(\"CreateProgram1 Copy\");\r",
							"}\r",
							"else\r",
							"{\r",
							"    postman.setNextRequest(null);\r",
							"    pm.environment.unset(\"pnames\")\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"let jsonResponseData = pm.response.json();\r",
							"pm.environment.set(\"progID\", jsonResponseData.programId);\r",
							"pm.environment.set(\"programName\", jsonResponseData.programName);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "03717993-f065-4bdb-8d10-6fe9623f9f19",
						"exec": [
							"var pnames=pm.environment.get(\"pnames\");\r",
							"\r",
							"if(!pnames)\r",
							"{\r",
							" pnames=[\"test\",\"deve\",\"salesforce\"];\r",
							" \r",
							"}\r",
							"\r",
							"var currentprgname=pnames.shift();\r",
							"pm.environment.set(\"pname\",currentprgname);\r",
							"pm.environment.set(\"pnames\",pnames);"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "3730072c-263e-467b-90e4-23d12c836673",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"programDescription\": \"{{progDesc}}\",\r\n    \"programName\": \"{{pname}}+{{$randomAlphaNumeric}}\",\r\n    \"programStatus\": \"{{prgStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PostProgramEndPoint}}"
			},
			"response": []
		},
		{
			"name": "CreateProgram2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "268151b3-e1ba-49c6-9c25-f70647ff16bd",
						"exec": [
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"let jsonResponseData = pm.response.json();\r",
							"pm.environment.set(\"progID2\", jsonResponseData.programId);\r",
							"pm.environment.set(\"programName2\", jsonResponseData.programName);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Test data Type of a response\", () => {\r",
							"    pm.expect(jsonResponseData).to.be.an(\"Object\");\r",
							"    pm.expect(jsonResponseData.programId).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponseData.programName).to.be.a(\"string\");\r",
							"    pm.expect(jsonResponseData.programName).to.not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Schema validation for response body\", function () {\r",
							"    var schema = {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"            programId: { type: \"number\" },\r",
							"            programName: { type: \"string\" },\r",
							"            programDescription: { type: \"string\" },\r",
							"            programStatus: { type: \"string\" },\r",
							"            creationTime: { type: \"string\" },\r",
							"            lastModTime: { type: \"string\" }\r",
							"        },\r",
							"        required: [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
							"    };\r",
							"\r",
							"    pm.expect(tv4.validate(jsonResponseData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('schema validation', () => {\r",
							"    var schema = {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"            programId: { type: \"number\" },\r",
							"            programName: { type: \"string\" },\r",
							"            programDescription: { type: \"string\" },\r",
							"            programStatus: { type: \"string\" },\r",
							"            creationTime: { type: \"string\" },\r",
							"            lastModTime: { type: \"string\" }\r",
							"        },\r",
							"        required: [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
							"    };\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"pm.test(\"programId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programId).to.be.a('number');\r",
							"    pm.expect(responseData.programId).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"programName is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.programName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"programDescription is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programDescription).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transfer-Encoding header is present in the response\", function () {\r",
							"    pm.expect(pm.response.headers.has(\"Transfer-Encoding\")).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transfer-Encoding header is set to chunked\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.equal(\"chunked\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transfer-Encoding header is not set to gzip\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.not.equal(\"gzip\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transfer-Encoding header is not set to deflate\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.not.equal(\"deflate\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transfer-Encoding header is not set to compress\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.not.equal(\"compress\");\r",
							"});\r",
							"\r",
							"// Store the programId from the response in an environment or global variable\r",
							"var programId = responseBody.programId;\r",
							"pm.environment.set(\"programId\", programId);\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.programId).to.exist;\r",
							"    pm.expect(responseData.programName).to.exist;\r",
							"    pm.expect(responseData.programDescription).to.exist;\r",
							"    pm.expect(responseData.programStatus).to.exist;\r",
							"    pm.expect(responseData.creationTime).to.exist;\r",
							"    pm.expect(responseData.lastModTime).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"programId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programId).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"programName is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"programDescription is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programDescription).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"programId is a positive integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programId).to.be.a('number').and.to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"programName is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"programDescription is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programDescription).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"programStatus is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.programStatus).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"creationTime is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.creationTime).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"lastModTime is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.lastModTime).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"programId should be a positive integer\", function () {\r",
							"    pm.expect(jsonResponseData.programId).to.be.a(\"number\").and.to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"programName should not be an empty string\", function () {\r",
							"    pm.expect(jsonResponseData.programName).to.be.a(\"string\").and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"programDescription should not be an empty string\", function () {\r",
							"    pm.expect(jsonResponseData.programDescription).to.be.a(\"string\").and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"programStatus should not be an empty string\", function () {\r",
							"    pm.expect(jsonResponseData.programStatus).to.be.a(\"string\").and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"creationTime should not be an empty string\", function () {\r",
							"    pm.expect(jsonResponseData.creationTime).to.be.a(\"string\").and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"lastModTime should not be an empty string\", function () {\r",
							"    pm.expect(jsonResponseData.lastModTime).to.be.a(\"string\").and.to.have.lengthOf.at.least(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "03717993-f065-4bdb-8d10-6fe9623f9f19",
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "1f776edc-86ed-4774-9799-b4af92dcf9b8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"programDescription\": \"{{prgDesc}}\",\r\n    \"programName\": \"{{prgName}}+{{$randomAlphaNumeric}}\",\r\n    \"programStatus\": \"{{prgStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PostProgramEndPoint}}"
			},
			"response": []
		},
		{
			"name": "CreateProgram-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93cd5cf7-a47d-451d-bf80-43e9b501eef1",
						"exec": [
							"pm.test(\"Status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error is 'Bad request'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData.message);\r",
							"    pm.expect(jsonData.message).to.eql(\"cannot create program , since already exists\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "fbff523b-de0b-479d-ad96-a2d872382a2b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"programDescription\": \"{{prgDesc}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{prgStatus}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PostProgramEndPoint}}"
			},
			"response": []
		},
		{
			"name": "CreateProgram-500",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4eb25108-b5d7-4225-83c0-964f1170328f",
						"exec": [
							"pm.test(\"Status is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"pm.test(\"Error is 'Internal Server Error'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql('Internal Server Error');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "b822b640-a84f-4ecd-9d4f-01073c0bc6dd",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"programDescription\": \"{{prgDesc}}\"  \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PostProgramEndPoint}}"
			},
			"response": []
		},
		{
			"name": "GetProgramByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c2ab65b4-f11e-4e9a-8a2a-43271418ea53",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "14e74f65-a731-4d1b-9f0b-d29273d0de59",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}{{GetProgId}}"
			},
			"response": []
		},
		{
			"name": "PutProgrambyID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54fb2a1b-2ed4-4749-ba79-df92455a3e2c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "2797a589-ed83-422f-ad35-da2daf3c4959",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n  \"programDescription\": \"{{updateprogDesc}}\",\r\n  \"programId\": \"{{progID}}\",\r\n  \"programName\": \"{{programName}}{{$randomAlphaNumeric}}\",\r\n  \"programStatus\": \"{{updateprogStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PutProgrambyID}}"
			},
			"response": []
		},
		{
			"name": "PutProgrambyID-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f1e4698-ec43-4524-b9c3-51464bf5eda9",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "dce74fa9-5747-425f-b5e7-685e043eec45",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n  \"programDescription\": \"{{updateprogDesc}}\",\r\n  \"programId\": \"{{progID}}+{{$randomAlphaNumeric}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{updateprogStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PutProgrambyID}}"
			},
			"response": []
		},
		{
			"name": "PutProgrambyID-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4b84802e-ac3b-44ad-b57f-8e3587141fca",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "d4d36268-eac8-4be2-9496-99b1488e3796",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n  \"programDescription\": \"{{updateprogDesc}}\",\r\n  \"programId\": \"{{progID}}+{{$randomAlphaNumeric}}\",\r\n  \"programName\": \"{{programName}}+{{$randomAlphaNumeric}}\",\r\n  \"programStatus\": \"{{updateprogStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PutProgrambyID}}"
			},
			"response": []
		},
		{
			"name": "PutProgrambyName2",
			"_postman_id": "6f7f397c-129c-4fe6-a9f3-f70f8e5c1d5d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"programDescription\": \"{{updateprogDesc}}\",\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programStatus\": \"{{updateprogStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PutProgrambyName2}}"
			},
			"response": []
		},
		{
			"name": "CreateBatch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "056119a8-8d84-46cf-b96f-d832785637c0",
						"exec": [
							"let jsonResponseData=pm.response.json();\r",
							"pm.environment.set(\"batchID\",jsonResponseData.batchId);\r",
							"pm.environment.set(\"batchName\",jsonResponseData.batchName);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ed5ef8ea-0205-450d-88f3-ab4409408cfb",
						"exec": [
							"var progId=pm.environment.get(progID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "69d44224-3cdf-49e1-b780-8c70c4f85006",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"batchDescription\":\"{{batchDesc}}\",\r\n\"batchName\":\"Jun23-APISlogger-SalesForce-{{$randomInt}}\",\r\n\"batchNoOfClasses\":\"{{batchNoOfClasses}}\",\r\n\"batchStatus\":\"{{batchStatus}}\",\r\n\"programId\":\"{{progID}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PostBatchEndPoint}}"
			},
			"response": []
		},
		{
			"name": "CreateBatch-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "056119a8-8d84-46cf-b96f-d832785637c0",
						"exec": [
							"let jsonResponseData=pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ed5ef8ea-0205-450d-88f3-ab4409408cfb",
						"exec": [
							"var progId=pm.environment.get(progId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "8ee9aa83-052a-4ed0-8b53-76ac6760954e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"batchDescription\":\"{{batchDesc}}\",\r\n\r\n\"batchNoOfClasses\":\"{{batchNoOfClasses}}\",\r\n\"batchStatus\":\"{{batchStatus}}\",\r\n\"programId\":\"{{progID}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PostBatchEndPoint}}"
			},
			"response": []
		},
		{
			"name": "GetAllBatches",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f78accdf-6601-43e5-8f16-5f22fbf802f9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "e118c36b-fc5d-419f-a3df-85f2ed66db47",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}{{GetallBatches}}"
			},
			"response": []
		},
		{
			"name": "GetBatchByID-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "035a63db-5762-4d3a-95dd-0024db64ecf3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "03011e4d-0730-471c-8d4f-35b53453e042",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}{{GetBatchByID}}"
			},
			"response": []
		},
		{
			"name": "GetBatchbyName-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3865a09c-e056-467f-bb3e-d23fdcb1212a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "40acbed6-6252-4b95-8c38-0e21003d6959",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}{{GetBatchByName}}"
			},
			"response": []
		},
		{
			"name": "updateBatchbyBatchId-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "96abbee6-53ae-4f2b-819e-6318de225bf3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "ff1cdde7-dc20-41c1-89c4-536dc1ac03e7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"batchDescription\":\"{{batchDesc}}\",\r\n\"batchId\":{{batchID}},\r\n\"batchName\":\"Jun23-APISlogger-SalesForce-{{$randomInt}}\",\r\n\"batchNoOfClasses\":\"{{batchNoOfClasses}}\",\r\n\"batchStatus\":\"{{batchStatus}}\",\r\n\"programId\":\"{{progID}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PutBatchByID}}"
			},
			"response": []
		},
		{
			"name": "updateBatchbyBatchId-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb534386-b2ce-4a63-b5b0-a252929b9774",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "7f8f8d2a-fae0-4a5a-97d1-f8e791a5bdfa",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"batchDescription\":\"{{batchDesc}}\",\r\n\"batchNoOfClasses\":\"{{batchNoOfClasses}}\",\r\n\"batchStatus\":\"{{batchStatus}}\",\r\n\"programId\":\"{{progID}}\",\r\n\"batchId\":{{batchID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}{{PutBatchByID}}"
			},
			"response": []
		},
		{
			"name": "deletebyBatchID-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c1099575-8b56-423c-bea4-af889e94253c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "5038083b-5502-43c4-91c3-36fcf782d7cf",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{URL}}{{deletebyBatchID}}"
			},
			"response": []
		},
		{
			"name": "deletebyBatchID-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "380c5c9c-11c3-4613-8107-ca7109e67f11",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "bb3c221d-8f86-413a-929a-d6c91f8d0c3d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{URL}}{{deletebyBatchID}}"
			},
			"response": []
		},
		{
			"name": "DeletebyProgramID1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48b61425-36e3-423a-998c-e2a51b8c4b9f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "2ce13f6a-9f77-4e9f-ac14-ebc1cf239dfa",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{URL}}{{DeletebyProgramID}}"
			},
			"response": []
		},
		{
			"name": "DeletebyProgramID1-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48b61425-36e3-423a-998c-e2a51b8c4b9f",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "6805ff4a-39ff-48b8-93d2-32e74934ef41",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{URL}}{{DeletebyProgramID}}"
			},
			"response": []
		},
		{
			"name": "DeletebyProgramName2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aebc1593-8645-4904-aeb0-dd3971ea429f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "ba777dea-6578-48da-b90c-13888fae3945",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{URL}}{{DeletebyProgramName}}"
			},
			"response": []
		},
		{
			"name": "DeletebyProgramName2-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aebc1593-8645-4904-aeb0-dd3971ea429f",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "924fdaa8-51b8-4b4d-8712-71a0a0960485",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{URL}}{{DeletebyProgramName}}"
			},
			"response": []
		},
		{
			"name": "GetBatchByID-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "715bd796-daa2-4d42-8d3d-ce2d1c083dcd",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "2f2bad7e-414a-4832-93cd-c2c97d361362",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}{{GetBatchByID}}"
			},
			"response": []
		},
		{
			"name": "GetProgramID-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3a11bffe-2e44-4937-817f-ff39762728ae",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "fc4e4cfa-5b47-4657-a81f-b4095e4ca6a1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}{{GetProgByID}}"
			},
			"response": []
		},
		{
			"name": "GetBatchbyName-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f96d3bc0-fd0c-4ee8-8c0c-34de93bbc042",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "15f3c982-b0cb-45c5-89bf-e6a16fdbccf5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}{{GetBatchByName}}"
			},
			"response": []
		}
	]
}